#!/usr/bin/perl

#
# Copyright (C) 2014 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use NethServer::Directory;
use NethServer::Password;

my $errors = 0;
my $ldap = NethServer::Directory->new or die("Cannot connect LDAP server");
$ldap->enforceAccessDirective('by anonymous read', 'dn.sub="dc=phonebook,dc=nh"');
my $db_pwd = NethServer::Password::store('PhonebookDBPasswd') || die('Could not generate Phonebook database password!');

#
# Connect to LDAP server
#
my $LdapInternalSuffix = NethServer::Directory::getInternalSuffix(); 
my $LdapDomainSuffix = NethServer::Directory::getDomainSuffix(); 

system("/usr/share/phonebooks/phonebook2ldap");

#
# Load the sql overlay, if missing
#
my $SqlModule = `rpm -ql openldap-servers-sql | grep 'back_sql\.la\$'`;
chomp($SqlModule);

my $olcModuleSearch = $ldap->search(
    base => 'cn=config',
    filter => "(&(objectClass=olcModuleList)(olcModuleLoad={0}$SqlModule))",
    scope => 'one',
    attributes => ['olcModuleLoad']
    );

if ($olcModuleSearch->count() == 0) {
    my $ldapAddResponse = $ldap->add(
	'cn=module,cn=config',
	attrs => [
	    cn => 'module',
	    objectClass => 'olcModuleList',
	    olcModuleLoad => $SqlModule	
	]
    );
    if($ldapAddResponse->is_error) {
	warn "`$SqlModule` back_sql module load error";
	$errors ++;
    }
}

#
# Replace some global settings, access control setup:
#
my $ldapResponse = $ldap->search(
    base => 'cn=config',
    filter => "(&(objectClass=olcSqlConfig)(olcDatabase=sql))",
    scope => 'one',
);

if($ldapResponse->count() == 0) {
    $ldapResponse = $ldap->add('olcDatabase=sql,cn=config', 'attrs' => [
         'objectClass' => ['olcDatabaseConfig', 'olcSqlConfig'],
         'olcDatabase' => 'sql',
         'olcDbName' => 'phonebook',
         'olcDbPass' => $db_pwd,
         'olcDbUser' => 'pbookuser',
         'olcSqlHasLDAPinfoDnRu' => 'FALSE',
         'olcSuffix' => 'dc=phonebook,dc=nh'
    ]);   

    if($ldapResponse->is_error) {
        warn("[ERROR] Failed to add slapd-sql backend configuration " . $ldapResponse->error_text);
        $errors ++;
    }
 
} else {
    my $sqlDbDn = $ldapResponse->entry(0)->dn;
    $ldapResponse = $ldap->modify($sqlDbDn, 'replace' => [
       'olcDbName' => 'phonebook',
       'olcDbPass' => $db_pwd,
       'olcDbUser' => 'pbookuser',
       'olcSqlHasLDAPinfoDnRu' => 'FALSE',
       'olcSuffix' => 'dc=phonebook,dc=nh'
    ]);

    if($ldapResponse->is_error) {
        warn("[ERROR] Failed to modify slapd-sql backend configuration " . $ldapResponse->error_text);
        $errors ++;
    }
}

#
# Configure SOGo, if installed
#
my $ret = system('rpm -qi nethserver-sogo &>/dev/null');
if ($ret eq 0) {
    system('/sbin/e-smith/signal-event nethserver-sogo-update');
}

exit($errors == 0 ? 0 : 1);
